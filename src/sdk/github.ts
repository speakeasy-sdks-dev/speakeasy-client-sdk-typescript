/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { githubCheckAccess } from "../funcs/githubCheckAccess.js";
import { githubConfigureCodeSamples } from "../funcs/githubConfigureCodeSamples.js";
import { githubConfigureMintlifyRepo } from "../funcs/githubConfigureMintlifyRepo.js";
import { githubConfigureTarget } from "../funcs/githubConfigureTarget.js";
import { githubFetchPublishingPRs } from "../funcs/githubFetchPublishingPRs.js";
import { githubGetAction } from "../funcs/githubGetAction.js";
import { githubGithubCheckPublishingSecrets } from "../funcs/githubGithubCheckPublishingSecrets.js";
import { githubGithubStorePublishingSecrets } from "../funcs/githubGithubStorePublishingSecrets.js";
import { githubTriggerAction } from "../funcs/githubTriggerAction.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Github extends ClientSDK {
    async checkAccess(
        request: operations.CheckAccessRequest,
        options?: RequestOptions
    ): Promise<shared.ErrorT | undefined> {
        return unwrapAsync(githubCheckAccess(this, request, options));
    }

    async configureCodeSamples(
        request: shared.GithubConfigureCodeSamplesRequest,
        options?: RequestOptions
    ): Promise<operations.ConfigureCodeSamplesResponse> {
        return unwrapAsync(githubConfigureCodeSamples(this, request, options));
    }

    async configureMintlifyRepo(
        request: shared.GithubConfigureMintlifyRepoRequest,
        options?: RequestOptions
    ): Promise<shared.ErrorT | undefined> {
        return unwrapAsync(githubConfigureMintlifyRepo(this, request, options));
    }

    async configureTarget(
        request: shared.GithubConfigureTargetRequest,
        options?: RequestOptions
    ): Promise<shared.ErrorT | undefined> {
        return unwrapAsync(githubConfigureTarget(this, request, options));
    }

    async fetchPublishingPRs(
        request: operations.FetchPublishingPRsRequest,
        options?: RequestOptions
    ): Promise<operations.FetchPublishingPRsResponse> {
        return unwrapAsync(githubFetchPublishingPRs(this, request, options));
    }

    async getAction(
        request: operations.GetActionRequest,
        options?: RequestOptions
    ): Promise<operations.GetActionResponse> {
        return unwrapAsync(githubGetAction(this, request, options));
    }

    async githubCheckPublishingSecrets(
        request: operations.GithubCheckPublishingSecretsRequest,
        options?: RequestOptions
    ): Promise<operations.GithubCheckPublishingSecretsResponse> {
        return unwrapAsync(githubGithubCheckPublishingSecrets(this, request, options));
    }

    async githubStorePublishingSecrets(
        request: shared.GithubStorePublishingSecretsRequest,
        options?: RequestOptions
    ): Promise<shared.ErrorT | undefined> {
        return unwrapAsync(githubGithubStorePublishingSecrets(this, request, options));
    }

    async triggerAction(
        request: shared.GithubTriggerActionRequest,
        options?: RequestOptions
    ): Promise<shared.ErrorT | undefined> {
        return unwrapAsync(githubTriggerAction(this, request, options));
    }
}
