/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { eventsGetWorkspaceEventsByTarget } from "../funcs/eventsGetWorkspaceEventsByTarget.js";
import { eventsGetWorkspaceTargets } from "../funcs/eventsGetWorkspaceTargets.js";
import { eventsPostWorkspaceEvents } from "../funcs/eventsPostWorkspaceEvents.js";
import { eventsSearchWorkspaceEvents } from "../funcs/eventsSearchWorkspaceEvents.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Events extends ClientSDK {
    /**
     * Load recent events for a particular workspace
     */
    async getWorkspaceEventsByTarget(
        request: operations.GetWorkspaceEventsByTargetRequest,
        options?: RequestOptions
    ): Promise<operations.GetWorkspaceEventsByTargetResponse> {
        return unwrapAsync(eventsGetWorkspaceEventsByTarget(this, request, options));
    }

    /**
     * Load targets for a particular workspace
     */
    async getWorkspaceTargets(
        request: operations.GetWorkspaceTargetsRequest,
        options?: RequestOptions
    ): Promise<operations.GetWorkspaceTargetsResponse> {
        return unwrapAsync(eventsGetWorkspaceTargets(this, request, options));
    }

    /**
     * Post events for a specific workspace
     *
     * @remarks
     * Sends an array of events to be stored for a particular workspace.
     */
    async postWorkspaceEvents(
        request: operations.PostWorkspaceEventsRequest,
        options?: RequestOptions
    ): Promise<shared.ErrorT | undefined> {
        return unwrapAsync(eventsPostWorkspaceEvents(this, request, options));
    }

    /**
     * Search events for a particular workspace by any field
     */
    async searchWorkspaceEvents(
        request: operations.SearchWorkspaceEventsRequest,
        options?: RequestOptions
    ): Promise<operations.SearchWorkspaceEventsResponse> {
        return unwrapAsync(eventsSearchWorkspaceEvents(this, request, options));
    }
}
